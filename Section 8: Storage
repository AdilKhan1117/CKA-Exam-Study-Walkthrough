Docker storage: 
2 Processes: 
- Storage drivers
- Volume drivers 

- Docker stores stores data on the local file system
  - file system: 
    - /var/lib/docker
      - aufs
      - containers
      - image
      - volumes
      
- Dockers layered architecture: Docker file - image
  - Layer 1 - Base Ubuntu Layer
  - Layer 2 - Changes in apt packages
  - Layer 3 - changes in pip packages
  - Layer 4 - source code 
  - Layer 5 - Update Entrypoint
  
  Dockerfile 2
  - Layer 1 - Base Ubuntu Layer <<<<<<<<<------------------ Docker uses previous layers from cache  
  - Layer 2 - Changes in apt packages <<<<<<<<<<----------- Docker uses previous layers from cache 
  - Layer 3 - changes in pip packages <<<<<<<<<<----------- Docker uses previous layers from cache 
  - Layer 4 - source code 
  - Layer 5 - Update Entrypoint
  
  - Layer 1 - Base Ubuntu Layer
  - Layer 2 - Changes in apt packages
  - Layer 3 - changes in pip packages
  - Layer 4 - source code 
  - Layer 5 - Update Entrypoint
  - Layer 6 - Container Layer <<<<<<<<<<<<----- When you run docker image, it creates new layer used to store data created
                                                by the container. Life if this layer, if container is destroyed so is this. 

- Layer 6: =  Read Write
- Image Layers: = Read Only 

Example:
app.py in Image layer, docker will automatically create a copy of this file in the container layer, than modifying different level 
version of the file in the read/write layer. 

- What happens if you get rid of the container?
  - All the data stored in the container layer, also gets delete, change made to app.py will also get removed.
  
Persist volume / peserve:
- Create Docker volume, 'docker volume create data_volume'
- Creates a new folder called data_volume
  - /var/lib/dockeer
    - volumes
    - data_volume
- Than running the docker container, can run this command to  store volume
  - docker run -v data_volume :/var/lib/mysql mysql 
  - this will create new container and mount the data volume to the data folder
  - even if the data is destroyed, the container is still active
  
  2 types of mounting:
  - Bind mounting: Mounts from any location on the docker host 
  - Volume Mounting: mounts a volume from the volumes directorory. 
  
Who is responsible for all this, maintaing the layered architecture, creating writable layer, 
moving layers across layers copy and write etc is:
- STORAGE DRIVERS

- Docker will choose the best storage driver available automatically based on the operating system. 
 
 Storage drivers: help manage storage on containers and images
 volumes: persist storage must create storage
          - local is the default volume driver plugin
          
- When you run a docker container, you can choose a specific volume driver such as rexray/ebs to provision
  a volume for amazon ebs. Will create a container and attach volume from the aws cloud, data saved in the cloud.
  
  Container storage interface (CSI). 
  - In the past k8s just used docker for CR, new runtimes come such as RKT/CRI-0 etc. 
  - Container runtime interface is a standard, how k8s communites with docker for example. 
  - CSI was created to support many other 3rd party vendors such as Portworkx etc
    - can write your own drivers to work with kubernetes
   
  CSI
  
  RPC - When a pod is created and requires a volume, k8s should call the create volume RPC and -
        pass detail such as volume name, storage driver should implement this RPC and provision new volume
        on the storag array 
  Create volume
  Delete Volume
  ControllerPublishVolume
 
Volumes:
- Docker containers are only meant to last for a short period of time


